apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: deploy-app-pipeline
  title: Deploy Application via Pipeline
  description: A template to deploy applications using the OpenShift pipeline across multiple namespaces.
spec:
  owner: backstage/dev-hub-team
  type: service

  # Parameters for user input in the frontend
  parameters:
    - title: Deployment Information
      required:
        - namespace
        - deploymentName
        - configMapName
        - workspaceName
        - repoUrl
      properties:
        namespace:
          title: Namespace Name
          type: string
          description: Specify the Kubernetes namespace for the deployment
          ui:autofocus: true
          ui:options:
            rows: 1
        deploymentName:
          title: Deployment Name
          type: string
          description: Unique name of the deployment
          ui:options:
            rows: 1
        configMapName:
          title: ConfigMap Name
          type: string
          description: Specify the name of the ConfigMap to use
          ui:options:
            rows: 1
        workspaceName:
          title: Workspace Name
          type: string
          description: Name of the workspace for the application
          ui:options:
            rows: 1
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # Steps to be executed in the backend
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          namespace: ${{ parameters.namespace }}
          deploymentName: ${{ parameters.deploymentName }}
          configMapName: ${{ parameters.configMapName }}
          workspaceName: ${{ parameters.workspaceName }}
          repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.fetch-base.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    - id: deploy-pipeline
      name: Deploy Application
      action: tekton:run
      input:
        pipeline: deploy-app-pipeline
        parameters:
          namespace: ${{ parameters.namespace }}
          deploymentName: ${{ parameters.deploymentName }}
          configMapName: ${{ parameters.configMapName }}
          workspaceName: ${{ parameters.workspaceName }}
          gitUrl: ${{ parameters.repoUrl }}
